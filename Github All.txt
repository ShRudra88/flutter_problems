üß© Best Practices for GitHub Teamwork (Junior Flutter Developer Edition)
‚úÖ Use Branching Strategy Properly

Main ‚Üí always stable, production-ready

Dev ‚Üí development integration branch

Feature branches ‚Üí feature/login-screen, feature/payment-integration, etc.

‚úÖ Commit Often with Clear Messages

Example: feat: add login UI, fix: resolve crash on startup

Small, meaningful commits help track progress easily.

‚úÖ Pull Before You Push

Always run git pull origin dev (or your base branch) before starting and before pushing changes.

Avoid merge conflicts!

‚úÖ Use Issues for Task Management

Track features, bugs, improvements.

Assign issues to yourself or teammates.

‚úÖ Open Pull Requests (PRs) for Every Feature

Even if you‚Äôre the only one working, create a PR for visibility and review.

‚úÖ Review and Approve PRs Before Merge

Always have at least one team member review your code.

Learn from each other through feedback!

‚úÖ Don‚Äôt Push Sensitive Files

Use .gitignore to ignore .env, API keys, Firebase config, etc.

Never push secrets to GitHub!

‚úÖ Automate with GitHub Actions (Optional but good to learn!)

Set up auto-checks: formatting, tests, linting.

CI/CD is your friend!

‚úÖ Write Helpful Documentation

Update README and add clear project setup steps.

Add comments in your code when needed!

‚úÖ Communicate Openly in Team

Use GitHub discussions, or your team chat (Slack/WhatsApp).

Ask questions early to avoid confusion later.






============================================
        GIT & GITHUB COMMANDS GUIDE
============================================
--------------------------------------------
1Ô∏è‚É£ INITIALIZING & CONFIGURING GIT
--------------------------------------------
Before using Git, you need to configure it with your name and email.

git init
    - Initializes a new Git repository in the current folder.
    - Creates a hidden `.git` folder that stores version history.

git config --global user.name "Your Name"
    - Sets your Git username for all projects.

git config --global user.email "your.email@example.com"
    - Sets your email address for all commits.

git config --list
    - Shows the current Git configuration settings.

--------------------------------------------
2Ô∏è‚É£ CLONING & CONNECTING TO REMOTE REPOSITORIES
--------------------------------------------
These commands are used to work with **remote repositories** (like GitHub).

git clone <repository_url>
    - Copies an existing repository from GitHub to your local computer.

git remote -v
    - Shows the URL of the remote repository connected to your project.

git remote add origin <repository_url>
    - Connects your local repository to a remote repository (GitHub).

--------------------------------------------
3Ô∏è‚É£ STAGING & COMMITTING CHANGES
--------------------------------------------
Git tracks changes in two stages: **Staging** and **Committing**.

git status
    - Shows the status of modified and untracked files.

git add <file>
    - Stages a specific file to be committed.

git add .
    - Stages **all** modified and new files.

git commit -m "Your commit message"
    - Saves (commits) the staged files with a message describing the changes.

--------------------------------------------
4Ô∏è‚É£ WORKING WITH BRANCHES
--------------------------------------------
Branches allow you to work on different features without affecting the main project.

git branch
    - Lists all existing branches.

git branch <branch_name>
    - Creates a new branch.

git checkout <branch_name>
    - Switches to another branch.

git checkout -b <branch_name>
    - Creates a new branch and switches to it.

git branch -d <branch_name>
    - Deletes a branch (only if it's merged).

--------------------------------------------
5Ô∏è‚É£ FETCHING & PULLING UPDATES
--------------------------------------------
These commands help you get the latest changes from a remote repository.

git fetch
    - Downloads new changes from the remote repository but **does not** merge them.

git pull origin <branch_name>
    - Fetches **and** merges changes from the remote repository into your local branch.

--------------------------------------------
6Ô∏è‚É£ PUSHING CHANGES TO REMOTE
--------------------------------------------
After making local changes, you need to **push** them to GitHub.

git push origin <branch_name>
    - Pushes your committed changes to the remote repository.

git push -u origin <branch_name>
    - Pushes the branch for the first time and sets it as the default tracking branch.

--------------------------------------------
7Ô∏è‚É£ MERGING & REBASING
--------------------------------------------
When working with branches, you often need to merge changes.

git merge <branch_name>
    - Merges the specified branch into the current branch.

git rebase <branch_name>
    - Reapplies commits on top of another branch.
    - Helps maintain a clean commit history.

--------------------------------------------
8Ô∏è‚É£ UNDOING CHANGES
--------------------------------------------
Made a mistake? No worries! These commands help undo changes.

git reset <file>
    - Removes a file from staging but **keeps changes** in the working directory.

git reset --hard <commit_hash>
    - Resets your project to a specific commit and **removes all changes** after that.

git revert <commit_hash>
    - Creates a new commit that undoes the changes made in a previous commit.

--------------------------------------------
9Ô∏è‚É£ VIEWING HISTORY & LOGS
--------------------------------------------
These commands help you see past commits and changes.

git log
    - Shows the complete history of commits.

git log --oneline --graph --all
    - Displays a compact **graphical** commit history.

git diff
    - Shows unstaged changes between your files and the last commit.

git diff --staged
    - Shows differences between **staged** changes and the last commit.

--------------------------------------------
üîü STASHING CHANGES (Temporary Save Without Commit)
--------------------------------------------
Sometimes, you need to temporarily save changes without committing them.

git stash
    - Saves changes to a temporary stack and **cleans** your working directory.

git stash pop
    - Applies the last stashed changes back to the working directory.

git stash list
    - Displays all stashed changes.

--------------------------------------------
üîπ ADDITIONAL USEFUL COMMANDS
--------------------------------------------
These extra commands can be helpful in certain situations.

git tag <tag_name>
    - Creates a tag for a specific commit (useful for version releases).

git show <commit_hash>
    - Shows details of a specific commit.

git shortlog
    - Summarizes commit history by author.

git clean -f
    - Removes untracked files (files that are not part of version control).

       END 


**local to github

‚úÖ Step 1: Git ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã
git --version
‡¶Ø‡¶¶‡¶ø Git ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá Git Download ‡¶•‡ßá‡¶ï‡ßá ‡¶á‡¶®‡ßç‡¶∏‡¶ü‡¶≤ ‡¶ï‡¶∞‡ßã‡•§

‚úÖ Step 2: GitHub ‡¶è ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® Repository ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã
üëâ GitHub ‡¶è ‡¶ó‡¶ø‡ßü‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® Repository ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã ‡¶è‡¶¨‡¶Ç URL ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßã‡•§

‚úÖ Step 3: Local Project-‡¶è Git ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßã
Command Prompt (cmd) / Git Bash / Terminal ‡¶ì‡¶™‡ßá‡¶® ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡ßã‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá ‡¶Ø‡¶æ‡¶ì‡¶É
cd path/to/your/project

‡¶§‡¶æ‡¶∞‡¶™‡¶∞ Git Initialize ‡¶ï‡¶∞‡ßã:
git init

‚úÖ Step 4: ‡¶´‡¶æ‡¶á‡¶≤ Add ‡¶ï‡¶∞‡ßã
git add .
‡¶è‡¶ü‡¶ø ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤ Git-‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßá‡•§

‚úÖ Step 5: ‡¶´‡¶æ‡¶á‡¶≤ Commit ‡¶ï‡¶∞‡ßã
git commit -m "Initial commit"
‡¶è‡¶ü‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã Git Repository-‡¶§‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá‡•§

‚úÖ Step 6: Remote Repository ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßã
GitHub ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ Repository URL ‡¶¶‡¶ø‡ßü‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ö‡¶æ‡¶≤‡¶æ‡¶ì‡¶É

git remote add origin https://github.com/your-username/your-repository.git
‚úÖ Step 7: ‡¶´‡¶æ‡¶á‡¶≤ GitHub-‡¶è Push ‡¶ï‡¶∞‡ßã

git branch -M main
git push -u origin main
‡¶è‡¶§‡ßá GitHub ‡¶è ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá! üöÄ

‚úÖ (Optional) ‡¶Ø‡¶¶‡¶ø Credential Issue ‡¶Ü‡¶∏‡ßá:
üëâ GitHub CLI ‡¶¶‡¶ø‡ßü‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßã:

gh auth login
‡¶Ö‡¶•‡¶¨‡¶æ, Git Credential Cache ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßã:

git config --global credential.helper store
üéØ ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßÅ‡¶∞‡ßã ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá:

cd path/to/your/project
git init
git add .
git commit -m "Initial commit"
git remote add origin https://github.com/your-username/your-repository.git
git branch -M main
git push -u origin main
üëâ ‡¶è‡¶ñ‡¶® GitHub-‡¶è ‡¶ó‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ñ‡ßã, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá! üéâ üòç


To bring (clone) code from GitHub to your local machine, follow these steps:

1Ô∏è‚É£ Open Terminal or Command Prompt
On Windows: Use Git Bash or Command Prompt.
On Mac/Linux: Use Terminal.
2Ô∏è‚É£ Navigate to Your Desired Directory

cd path/to/your/folder
(Replace path/to/your/folder with your actual directory.)

3Ô∏è‚É£ Clone the Repository
Run this command:

git clone https://github.com/username/repository.git
(Replace username and repository with the actual GitHub repo URL.)

4Ô∏è‚É£ Enter the Project Folder

cd repository
5Ô∏è‚É£ Check the Current Branch

git branch
‚úÖ Done! You now have the project locally. You can start working on it! üöÄ